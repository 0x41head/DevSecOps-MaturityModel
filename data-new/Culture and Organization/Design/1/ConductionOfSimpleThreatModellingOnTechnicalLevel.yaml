---
risk: Technical related threats are discovered too late in the development and deployment
  process.
measure: Threat modelling of technical features is performed during the product sprint
  planning.
difficultyOfImplementation:
  knowledge: 2
  time: 3
  resources: 1
usefulness: 3
level: 1
implementation:
- <a href="https://github.com/Toreon/threat-model-playbook">Threat modelling Playbook</a>
md-description: |2

  Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage.

    There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one.

    A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/).

    OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/).

    There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another.

    > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._

    ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png "Threat Model")

    Last, if the organisation maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function.

    ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png "SKF")

    This practice has the side effect that it trains non-security specialists to think like attackers.

    The outcomes of this stage should help lay the foundation of secure design and considerations.

    **Example Low Maturity Scenario:**

    Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password.

    Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext.

    Frontend serves data over GraphQL as a thin layer between caching system and end user.

    GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes.

    Source: OWASP Project Integration Project
samm: TA1-A
iso27001-2017:
- not explicitly covered by ISO 27001
- may be part of risk assessment
- 8.2.1
- 14.2.1
id: ConductionOfSimpleThreatModellingOnTechnicalLevel
...
