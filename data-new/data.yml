!!python/object/apply:collections.defaultdict
args:
- !!python/name:collections.defaultdict ''
dictitems:
  BuildAndDeployment:
    sub-dimensions:
      Build:
        Building and testing of artifacts in virtual environments:
          difficultyOfImplementation:
            knowledge: 2
            resources: 2
            time: 2
          implementation:
          - Container technologies and orchestration like Docker, Kubernetes
          - CI/CD Tools, e.g. Jenkins
          iso27001-2017:
          - 14.2.6
          level: 2
          measure: Each step during within the build and testing phase is performed
            in a separate virtual environments, which is destroyed afterward.
          meta:
            implementationGuide: Depending on your envirnoment, usage of virtual machines
              or container technoligy is a good way. After the build, the filesystem
              should not be used again in other builds.
          risk:
          - While building and testing artifacts, third party systems, application
            frameworks and 3rd party libraries are used. These might be malicious
            as a result of vulnerable libraries or because they are altered during
            the delivery phase.
          samm2: i-secure-build|A|2
          usefulness: 2
        Defined build process:
          difficultyOfImplementation:
            knowledge: 2
            resources: 2
            time: 3
          evidence: The build process is defined in <a href="REPLACE-ME">REPLACE-ME
            Pipeline</a> in the folder <i>vars</>. Projects are using a <i>Jenkinsfile</i>
            to use the defined process.
          implementation:
          - CI/CD Tools, e.g. Jenkins
          - Container technologies and orchestration like Docker, Kubernetes
          iso27001-2017:
          - 12.1.1
          - 14.2.2
          level: 1
          measure: A well defined build process lowers the possibility of errors during
            the build process.
          risk:
          - Performing builds without a defined process is error prone; for example,
            as a result of incorrect security related configuration.
          samm2: i-secure-build|A|1
          usefulness: 4
        Signing of artifacts:
          dependsOn:
          - Defined build process
          difficultyOfImplementation:
            knowledge: 2
            resources: 2
            time: 2
          implementation:
          - <a href="https://docs.docker.com/notary/getting_started/">Docker Content
            Trust</a>
          - <a href="https://in-toto.github.io/">in-toto</a>
          iso27001-2017:
          - 14.2.6
          level: 3
          measure: Digitally signing artifacts for all steps during the build and
            especially docker images, helps to ensure their integrity.
          risk: Unauthorized manipulation of artifacts might be difficult to spot.
            For example, this may result in images with malicious code in the Docker
            registry.
          samm: OA3-B
          samm2: i-secure-build|A|1
          usefulness: 4
        Signing of code:
          dependsOn:
          - Defined build process
          difficultyOfImplementation:
            knowledge: 2
            resources: 2
            time: 2
          implementation: null
          iso27001-2017:
          - 14.2.6
          level: 3
          measure: Digitally signing commits helps to prevent unauthorized manipulation
            of source code.
          risk: Unauthorized manipulation of source code might be difficult to spot.
          samm: OA3-B
          samm2: i-secure-build|A|2
          usefulness: 3
      Deployment:
        Backup before deployment:
          dependsOn:
          - Defined deployment process
          difficultyOfImplementation:
            knowledge: 1
            resources: 1
            time: 2
          implementation: A complete database backup might be performed*. For large
            and complex environments, a Point in Time Recovery for databases should
            be implemented.
          iso27001-2017:
          - '12.3'
          - 14.2.6
          level: 2
          measure: Performing automated backups before deployment can help facilitate
            deployments whilst testing the backup restore processes.
          risk: If errors are experienced during the deployment process you want to
            deploy an old release. However, due to changes in the database this is
            often unfeasible.
          samm: OE2-A
          samm2: TODO
          usefulness: 4
        Blue/Green Deployment:
          dependsOn:
          - Smoke Test
          difficultyOfImplementation:
            knowledge: 1
            resources: 1
            time: 2
          implementation: <a href='https://martinfowler.com/bliki/BlueGreenDeployment.html'>Blue/Green
            Deployments</a>
          iso27001-2017:
          - 17.2.1
          - 12.1.1
          - 12.1.2
          - 12.1.4
          - 12.5.1
          - 14.2.9
          level: 4
          measure: By having multiple production environments, a deployment can be
            performant on the first environment to spot possible defects before it
            is deployment in the production environment(s)
          risk: A new artifacts version can have unknown defects.
          samm2: TODO
          usefulness: 2
        Defined deployment process:
          difficultyOfImplementation:
            knowledge: 2
            resources: 1
            time: 2
          implementation: Jenkins, Docker
          iso27001-2017:
          - 12.1.1
          - 14.2.2
          level: 1
          measure: A defined deployment process significantly lowers the likelihood
            of errors during the deployment phase.
          risk: Deployments without a defined process are error prone thus allowing
            old or untested artifact to be deployed.
          samm2: i-secure-deployment|A|1
          usefulness: 4
        Environment depending configuration parameters:
          difficultyOfImplementation:
            knowledge: 2
            resources: 1
            time: 2
          implementation: ''
          iso27001-2017:
          - 9.4.5
          - 14.2.6
          level: 2
          measure: Configuration parameters are set for each environment not in the
            source code.
          risk: Attackers who compromise source code can see confidential access information
            like database credentials.
          samm: SA2-A
          samm2: i-secure-deployment|B|1
          usefulness: 4
        Handover of confidential parameters:
          dependsOn:
          - Environment depending configuration parameters
          difficultyOfImplementation:
            knowledge: 2
            resources: 1
            time: 2
          implementation: ''
          iso27001-2017:
          - 14.1.3
          - 13.1.3
          - 9.4.3
          - 9.4.1
          - 10.1.2
          level: 3
          measure: By using encryption, it is harder to read credentials , e.g. from
            the file system. Also, the usage of a credential management system can
            help protect credentials.
          risk:
          - Attackers who compromise a system can see confidential access information
            like database credentials.
          - Parameters are often used to set credentials, for example by starting
            containers or applications; these parameters can often be seen by any
            one listing running processes on the target system.
          samm: SA2-A
          samm2: i-secure-deployment|B|2 TODO might be 1
          usefulness: 4
        Inventory of running artifacts:
          dependsOn:
          - Defined deployment process
          difficultyOfImplementation:
            knowledge: 2
            resources: 3
            time: 2
          iso27001-2017:
          - '8.1'
          - '8.2'
          level: 3
          measure: A documented inventory or a possibility to gather the needed information
            (e.g. the documentation of which script needs to be run by whoom) must
            be in place.
          risk: In case a vulnerability of severity high or critical exists, it needs
            to be known where an artifacts with that vulnerability is deployed with
            which dependencies.
          samm2: o-incident-management|TODO
          usefulness: 3
        Rolling update on deployment:
          dependsOn:
          - Defined deployment process
          difficultyOfImplementation:
            knowledge: 2
            resources: 2
            time: 2
          implementation: Docker, Webserver, rolling update
          iso27001-2017:
          - 12.5.1
          - 14.2.2
          - 17.2.1
          level: 3
          measure: A deployment without downtime is performed*.
          risk: While a deployment is performed, the application can not be reached.
          samm2: i-secure-deployment|A|1
          usefulness: 2
        Same artifact for environments:
          dependsOn:
          - Defined build process
          difficultyOfImplementation:
            knowledge: 2
            resources: 1
            time: 2
          implementation: Docker
          iso27001-2017:
          - 14.3.1
          - 14.2.8
          - 12.1.4
          level: 3
          measure: Building an artifact once and deploying it to different environments
            means that only tested artifacts are allowed to reach the production environment
          risk: Building of an artifact for different environments means that an untested
            artifact might reach the production environment.
          samm: OE2-A
          samm2: i-secure-deployment|A|2
          usefulness: 4
        Usage of feature toggles:
          dependsOn:
          - Same artifact for environments
          difficultyOfImplementation:
            knowledge: 2
            resources: 1
            time: 1
          implementation: Docker
          iso27001-2017:
          - 14.3.1
          - 14.2.8
          - 14.2.9
          - 12.1.4
          level: 3
          measure: Usage of environment independent configuration parameter, called
            feature toggles, helps to enhance the test coverage. Only what has been
            tested, goes to production.
          risk: By using environment dependent configuration, some parameters will
            not be tested correctly. i.e. <pre>if (host == 'production') {} else {}</pre>
          samm: EG1-B
          usefulness: 2
        Usage of trusted images:
          difficultyOfImplementation:
            knowledge: 1
            resources: 1
            time: 1
          implementation: Kubernetes Admission Controller can whitelist registries
            and/or whitelist a signing key.
          iso27001-2017:
          - 15.1.1
          - 15.1.2
          - 15.1.3
          - 14.1.3
          level: 2
          measure: Create image assessment criteria, perform an evaluation of images
            and create a whitelist of artifacts/container images/virtual machine images.
          risk: Developers or operations might start random images in the production
            cluster which have malicous code or known vulnerabilities.
          samm2: i-secure-deployment|A|2
          usefulness: 3
      Patch Management:
        A patch policy is defined:
          difficultyOfImplementation:
            knowledge: 3
            resources: 2
            time: 1
          iso27001-2017:
          - 12.6.1
          - 12.5.1
          - 14.2.5
          level: 1
          measure: A patch policy for all artifacts (e.g. in images) is defined. How
            often is an image rebuilt?
          risk: Vulnerabilities in running containers stay for long and might get
            exploited.
          samm2: o-environment-management|B|1
          usefulness: 4
        Automated PRs for patches:
          difficultyOfImplementation:
            knowledge: 2
            resources: 2
            time: 2
          implementation:
          - <a href="https://dependabot.com/">dependabot</a>
          - Jenkins
          iso27001-2017:
          - 12.6.1
          - 14.2.5
          level: 1
          measure: Fast patching of third party component is needed. The DevOps way
            is to have an automated pull request for new components. This includes
            <ul> <li>Applications</li><li>Virutalized operating system components
            (e.g. container images)</li> <li>Operating Systems</li><li>Infrastructure
            as Code/GitOps (e.g. argocd)</li> </ul>
          risk: Known vulnerabilities components might stay for long and get exploited,
            even when a patch is available.
          samm2: o-environment-management|B|1
          usefulness: 5
        Nightly build of images:
          difficultyOfImplementation:
            knowledge: 3
            resources: 2
            time: 2
          iso27001-2017:
          - 12.6.1
          level: 2
          measure: Images are built at least nightly.
          risk: Vulnerabilities in running containers stay for too long and might
            get exploited.
          samm2: o-environment-management|B|1
          usefulness: 3
        Reduction of the attack surface:
          difficultyOfImplementation:
            knowledge: 3
            resources: 2
            time: 3
          implementation:
          - <a href="https://github.com/GoogleContainerTools/distroless">Distroless</a>
          - <a href="https://getfedora.org/coreos?stream=stable">Fedora CoreOS</a>
          iso27001-2017:
          - hardening is missing in ISO 27001
          - 14.2.1
          level: 2
          measure: Removal of unneeded components, dependencies, files or file access
            rights. For container images the usage of distroless images is recommended.
          risk: Components, dependencies, files or file access rights might have vulnerabilities,
            but the they are not needed.
          samm2: o-environment-management|B|1
          usefulness: 3
        Usage of a maximum lifetime for images:
          difficultyOfImplementation:
            knowledge: 3
            resources: 2
            time: 4
          iso27001-2017:
          - 12.6.1
          level: 2
          measure: The periodically built images are deployed minimum every 30 days
            (better hourly/daily/weekly). Meaning an image is not in production for
            longer than 30 days.
          risk: Vulnerabilities in images of running containers stay for too long
            and might get exploited. Long running containers have potential memory
            leaks. A compromised container might get killed by restarting the container
            (e.g. in case the attacker has not reached the persistence layer).
          samm2: o-environment-management|B|1
          usefulness: 3
        Usage of a short maximum lifetime for images:
          difficultyOfImplementation:
            knowledge: 3
            resources: 2
            time: 4
          implementation:
          - Sample concept:<br/>(1) each container has a set lifetime and is killed
            / replaced with a new container multiple times a day where you have some
            form of a graceful replacement to ensure no (short) service outage will
            occur to the end users.<br/>(2) twice a day a rebuild of images is done.
            The rebuilds are put into a automated testing pipeline. If the testing
            has no blocking issues the new images will be released for deployment
            during the next "restart" of a container. What has to be done, is to ensure
            the new containers are deployed in some canary deployment manner, this
            will ensure that if (and only if) something buggy has been introduced
            which breaks functionality the canary deployment will make sure the "older
            version" is being used and not the buggy newer one.
          iso27001-2017:
          - 12.6.1
          level: 4
          measure: Nightly built images are deployed at minimum every 1 day.
          risk: Vulnerabilities in running containers stay for too long and might
            get exploited.
          samm2: o-environment-management|B|1
          usefulness: 3
  CultureAndOrganization:
    Design:
      Conduction of advanced threat modelling:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
        level: 3
        md-description: '**Example High Maturity Scenario:**


          Based on a detailed threat model defined and updated through code, the team
          decides the following:


          * Local encrypted caches need to expire and auto-purged.

          * Communication channels encrypted and authenticated.

          * All secrets persisted in shared secrets store.

          * Frontend designed with permissions model integration.

          * Permissions matrix defined.

          * Input is escaped output is encoded appropriately using well established
          libraries.


          Source: OWASP Project Integration Project

          '
        measure: Threat modelling is performed by using reviewing user stories and
          producing security driven data flow diagrams.
        risk: Inadequate identification of business and technical risks.
        samm: TA2-B
        usefulness: 3
      Conduction of simple threat modelling on business level:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
        level: 2
        measure: Threat modelling of business functionality is performed during the
          product backlog creation to facilitate early detection of security defects.
        risk: Business related threats are discovered too late in the development
          and deployment process.
        samm: TA1-A
        usefulness: 3
      Conduction of simple threat modelling on technical level:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 3
        implementation:
        - <a href="https://github.com/Toreon/threat-model-playbook">Threat modelling
          Playbook</a>
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of risk assessment
        - 8.2.1
        - 14.2.1
        level: 1
        md-description: "\nOnce requirements are gathered and analysis is performed,\
          \ implementation specifics need to be defined. The outcome of this stage\
          \ is usually a diagram outlining data flows and a general system architecture.\
          \ This presents an opportunity for both threat modeling and attaching security\
          \ considerations to every ticket and epic that is the outcome of this stage.\n\
          \n  There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/)\
          \ article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling)\
          \ one.\n\n  A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/).\n\
          \n  OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling)\
          \ on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html).\
          \ Moreover, if you're following OWASP SAMM, it has a short section on [Threat\
          \ Assessment](https://owaspsamm.org/model/design/threat-assessment/).\n\n\
          \  There's a few projects that can help with creating Threat Models at this\
          \ stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec)\
          \ is another.\n\n  > Note: _A threat model can be as simple as a data flow\
          \ diagram with attack vectors on every flow and asset and equivalent remediations.\
          \ An example can be found below._\n\n  ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png\
          \ \"Threat Model\")\n\n  Last, if the organisation maps Features to Epics,\
          \ the Security Knowledge Framework (SKF) can be used to facilitate this\
          \ process by leveraging it's questionnaire function.\n\n  ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png\
          \ \"SKF\")\n\n  This practice has the side effect that it trains non-security\
          \ specialists to think like attackers.\n\n  The outcomes of this stage should\
          \ help lay the foundation of secure design and considerations.\n\n  **Example\
          \ Low Maturity Scenario:**\n\n  Following vague feature requirements the\
          \ design includes caching data to a local unencrypted database with a hardcoded\
          \ password.\n\n  Remote data store access secrets are hardcoded in the configuration\
          \ files. All communication between backend systems is plaintext.\n\n  Frontend\
          \ serves data over GraphQL as a thin layer between caching system and end\
          \ user.\n\n  GraphQL queries are dynamically translated to SQL, Elasticsearch\
          \ and NoSQL queries. Access to data is protected with basic auth set to\
          \ _1234:1234_ for development purposes.\n\n  Source: OWASP Project Integration\
          \ Project\n"
        measure: Threat modelling of technical features is performed during the product
          sprint planning.
        risk: Technical related threats are discovered too late in the development
          and deployment process.
        samm: TA1-A
        usefulness: 3
      Creation of advanced abuse stories:
        dependsOn:
        - Creation of simple abuse stories
        difficultyOfImplementation:
          knowledge: 4
          resources: 1
          time: 2
        implementation: <a href='https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories'>Don't
          Forget EVIL User Stories</a> and <a href='http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf'>Practical
          Security Stories and Security Tasks for Agile Development Environments</a>
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of project management
        - 6.1.5
        - may be part of risk assesment
        - 8.1.2
        level: 4
        measure: Advanced abuse stories are created as part of threat modelling activities.
        risk: Simple user stories are not going deep enough. Relevant security considerations
          are performed. Security flaws are discovered too late in the development
          and deployment process
        samm: TA2-A
        usefulness: 4
      Creation of simple abuse stories:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation: <a href='https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories'>Don't
          Forget EVIL User Stories</a> and <a href='http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf'>Practical
          Security Stories and Security Tasks for Agile Development Environments</a>
        iso27001-2017:
        - not explicitly covered by ISO 27001
        - may be part of project management
        - 6.1.5
        - may be part of risk assesment
        - 8.1.2
        level: 2
        measure: Abuse stories are created during the creation of user stories.
        risk: User stories mostly don't consider security implications. Security flaws
          are discovered too late in the development and deployment process.
        samm: TA2-A
        usefulness: 4
      Information security targets are communicated:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        iso27001-2017:
        - 5.1.1
        - 7.2.1
        level: 0
        measure: Transparent and timely communication of the security targets by senior
          management is essential to ensure teams' buy-in and support.
        risk: Employees don't known their organisation security targets. Therefore
          security is not considered during development and administration as much
          as it should be.
        samm: SM1-B
        usefulness: 4
    Education and Guidance:
      Ad-Hoc Security trainings for software developers:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        implementation:
        - In case you do not have the budget to hire an external security expert,
          an option is to use the <a href="https://github.com/bkimminich/juice-shop">OWASP
          Juice Shop</a> on a "hacking Friday"
        - https://cheatsheetseries.owasp.org/
        iso27001-2017:
        - 7.2.2
        level: 1
        measure: Provide security awareness training for all personnel involved in
          software development Ad-Hoc.
        risk: Understanding security is hard and personnel needs to be trained on
          it. Otherwise, flaws like an SQL Injection might be introduced into the
          software which might get exploited.
        samm: EG1-A
        usefulness: 3
      Aligning security in teams:
        difficultyOfImplementation:
          knowledge: 4
          resources: 1
          time: 5
        implementation: Security SME are involved in discussion for requirements analysis,
          software design and sprint planning to provide guidance and suggestions.
        iso27001-2017:
        - 7.1.1
        level: 4
        measure: By aligning security SME with project teams, a higher security standard
          can be achieved.
        risk: The concept of Security Champions might suggest that only he/she is
          responsible for security. However, everyone in the project team should be
          responsible for security.
        samm: EG2-B
        usefulness: 5
      Conduction of build-it, break-it, fix-it contests:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        implementation: https://builditbreakit.org/
        iso27001-2017:
        - 7.2.2
        level: 3
        measure: The build-it, break-it, fix-it contest allows to train people with
          security related roles like security champions the build, break and fix
          part of a secure application. This increases the learning of building secure
          components.
        risk: Understanding security is hard, even for security champions and the
          conduction of security training often focuses on breaking a component instead
          of building a component secure.
        usefulness: 3
      Conduction of collaborative security checks with developers and system administrators:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 2
        iso27001-2017:
        - Mutual review of source code is not explicitly required in ISO 27001 may
          be
        - 7.2.2
        - 12.6.1
        - 12.7.1
        level: 3
        measure: Periodically security reviews of source code (SCA), in which security
          SME, developers and operations are involved, are effective at increasing
          the robustness of software and the security knowledge of the teams involved.
        risk: Security checks by external companies do not increase the understanding
          of an application/system for internal employees.
        samm: IR1-B
        usefulness: 3
      Conduction of collaborative team security checks:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 4
        iso27001-2017:
        - Mutual scurity testing is not explicitly required in ISO 27001 may be
        - 7.2.2
        level: 4
        measure: Mutual security testing the security of other teams's project enhances
          security awareness and knowledge.
        risk: Development teams limited insight over security practices.
        samm: EG2-A
        usefulness: 2
      Conduction of war games:
        difficultyOfImplementation:
          knowledge: 4
          resources: 5
          time: 5
        iso27001-2017:
        - ware games are not explicitly required in ISO 27001 may be
        - 7.2.2
        - '16.1'
        - 16.1.5
        level: 4
        measure: War Games like activities help train for incidents. Security SMEs
          create attack scenarios in a testing environment enabling the trainees to
          learn how to react in case of an incident.
        risk: Understanding incident response plans during an incident is hard and
          ineffective.
        usefulness: 2
      Each team has a security champion:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 2
        implementation: https://www.owasp.org/index.php/Security_Champions_Playbook
        iso27001-2017:
        - security champions are missing in ISO 27001 most likely
        - 7.2.1
        - 7.2.2
        level: 2
        measure: Each team defines an individual to be responsible for security. These
          individuals are often referred to as 'security champions'
        risk: No one feels directly responsible for security and the security champion
          does not have enough time to allocate to each team.
        samm: EG2-B
        usefulness: 3
      Regular security training for all:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation:
        - In case you do not have the budget to hire an external security expert,
          an option is to use the <a href="https://github.com/bkimminich/juice-shop">OWASP
          Juice Shop</a> on a "hacking Friday"
        - https://cheatsheetseries.owasp.org/
        iso27001-2017:
        - 7.2.2
        level: 2
        measure: Provide security awareness training for all personnel involved in
          software development on a regular basis like twice in a year for 1-3 days.
        risk: Understanding security is hard.
        samm: EG1-A
        usefulness: 3
      Regular security training for everyone:
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 2
        implementation: Often, external employees are not invited for interal trainings.
          This activity focuses on providing security trainings to internal as well
          as external employees. It is conducted every two weeks for around one hour.
        iso27001-2017:
        - 7.2.2
        level: 3
        measure: Regular security training for everyone.
        risk: Understanding security is hard, for internal as well as external employees.
        samm: EG2-B
        usefulness: 3
      Regular security training of security champions:
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 2
        evidence: '- Process Documentation: TODO

          - Training Content: TOODO

          '
        iso27001-2017:
        - security champions are missing in ISO 27001
        - 7.2.2
        level: 2
        measure: Regular security training of security champions.
        risk: Understanding security is hard, even for security champions.
        samm: EG2-B
        usefulness: 3
      Reward of good communication:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 2
        implementation:
        - Enhance motivation can be performed with the distribution of pins as a reward,
          see <a href='https://github.com/wurstbrot/security-pins'>OWASP Security
          Pins Project</a>
        - https://owaspsamm.org/presentations/OWASP_Top_10_Maturity_Categories_for_Security_Champions.pptx
        iso27001-2017:
        - not required by ISO 27001
        - interestingly enough A7.2.3 is requiring a process to handle misconduct
          but nothing to promote good behavior.
        level: 2
        measure: Good communication and transparency encourages cross-organisational
          support. Gamification of security is also known to help, examples include
          T-Shirts, mugs, cups, giftcards and 'High-Fives'.
        risk: Employees are not getting excited about security.
        usefulness: 3
      Security consulting on request:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        iso27001-2017:
        - security consulting is missing in ISO 27001 may be
        - 6.1.1
        - 6.1.4
        - 6.1.5
        level: 1
        measure: Security consulting to teams is given on request. The security consultants
          can be internal or external.
        risk: Not asking a security expert when questions regarding security appear
          might lead to flaws.
        samm: EG2-B
        usefulness: 3
      Security-Lessoned-Learned:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        iso27001-2017:
        - 16.1.6
        level: 3
        measure: Running a 'lessons learned' session after an incident helps drive
          continuous improvement. Regular meetings with security champions are a good
          place to share and discuss lessons learned.
        risk: After an incident, a similar incident might reoccur.
        samm: IM-3, ST-3, SR2-B
        usefulness: 3
    Process:
      Approval by reviewing any new version:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        iso27001-2017:
        - peer review - four eyes principle is not explicitly required by ISO 27001
        - 6.1.2
        - 14.2.1
        level: 3
        measure: On each new version (e.g. Pull Request) of source code or infrastructure
          components a security peer review of the changes is performed (two eyes
          principle) and approval given by the reviewer.
        risk: An individual might forget to implement security measures to protect
          source code or infrastructure components.
        samm: IR1-B
        usefulness: 3
      Definition of a change management process:
        difficultyOfImplementation:
          knowledge: 4
          resources: 1
          time: 3
        iso27001-2017:
        - 14.2.2
        - 12.1.2
        - 12.4.1
        level: 3
        measure: Each change of a system is automatically recorded and adequately
          logged.
        risk: The impact of a change is not controlled because these are not recorded
          or documented.
        usefulness: 3
      Definition of simple BCDR practices for critical components:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 3
        iso27001-2017:
        - 17.1.1
        level: 1
        measure: By understanding and documenting a business continuity and disaster
          recovery (BCDR) plan, the overall availability of systems and applications
          is increased. Success factors like responsibilities, Service Level Agreements,
          Recovery Point Objectives, Recovery Time Objectives or Failover must be
          fully documented and understood.
        risk: In case of an emergency, like a power outage, DR actions to perform
          are not clear. This leads to reaction and remediation delays.
        usefulness: 4
      Prevention of unauthorized installation:
        comment: By preventing teams from trying out new components, innovation might
          be hampered
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        implementation: 'Example: All docker images used by teams need to be based
          on standard images.'
        iso27001-2017:
        - 12.5.1
        - 12.6.1
        level: 3
        measure: Components must be whitelisted. Regular scans on the docker infrastructure
          (e.g. cluster) need to be performed, to verify that only standardized base
          images are used.
        risk: Unapproved components are used.
        usefulness: 3
  Implementation:
    Application Hardening:
      App. Hardening Level 2:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 4
        implementation:
        - <a href='https://owasp.org/www-project-application-security-verification-standard/'>OWASP
          ASVS</a>
        - <a href="https://github.com/OWASP/owasp-masvs">OWASP MASVS</a>
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 2
        measure: "Following frameworks like the\n  <ul>\n    <li>OWASP Application\
          \ Security Verification Standard Level 2</li>\n    <li>OWASP Mobile Application\
          \ Security Verification Standard Level 2</li>\n  </ul>\n"
        risk: Using an insecure application might lead to a compromised application.
          This might lead to total data theft or data modification.
        samm2: software-requirements|A|2
        usefulness: 4
      App. Hardening Level 3:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 4
        implementation:
        - <a href='https://owasp.org/www-project-application-security-verification-standard/'>OWASP
          ASVS</a>
        - <a href="https://github.com/OWASP/owasp-masvs">OWASP MASVS</a>
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 3
        measure: "Following frameworks like the\n  <ul>\n    <li>OWASP Application\
          \ Security Verification Standard Level 3</li>\n    <li>OWASP Mobile Application\
          \ Security Verification Standard Maturity Requirements</li>\n  </ul>\n \
          \ and gain around 75% coverage of both.\n"
        risk: Using an insecure application might lead to a compromised application.
          This might lead to total data theft or data modification.
        samm2: software-requirements|A|3
        usefulness: 4
      Application Hardening Level 1:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 4
        implementation:
        - <a href='https://owasp.org/www-project-application-security-verification-standard/'>OWASP
          ASVS</a>
        - <a href="https://github.com/OWASP/owasp-masvs">OWASP MASVS</a>
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 1
        md-description: 'To tackle the security of code developed in-house, OWASP
          offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/)
          demonstrating how to implement features securely. Moreover, the Security
          Knowledge Framework[1] offers an extensive library of code patterns spanning
          several programming languages. These patterns can be used to not only jumpstart
          the development process, but also do so securely.


          [...]


          ### Planning aka Requirements Gathering & Analysis

          The Requirements gathering process tries to answer the question: _"What
          is the system going to do?"_ At this stage, the [SAMM project](https://owaspsamm.org/model/)
          offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/)
          software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/)
          supplier security.


          ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png)


          Organisations can use these to add solid security considerations at the
          start of the Software Development or Procurement process.


          These general security considerations can be audited by using a subsection
          of the ASVS controls in section V1 as a questionnaire. This process attempts
          to ensure that every feature has concrete security considerations.


          In case of internal development and if the organisation maps Features to
          Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/)
          can be used to facilitate this process by leveraging its questionnaire function,
          shown below.


          Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)

          '
        measure: "Following frameworks like the\n  <ul>\n    <li>OWASP Application\
          \ Security Verification Standard Level 1</li>\n    <li>OWASP Mobile Application\
          \ Security Verification Standard Level 1</li>\n  </ul>\n\nin all applications\
          \ provides a good baseline.\n"
        risk: Using an insecure application might lead to a compromised application.
          This might lead to total data theft or data modification.
        samm2: software-requirements|A|1
        usefulness: 4
      Full Coverage of App. Hardening Level 3:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 4
        implementation:
        - <a href='https://owasp.org/www-project-application-security-verification-standard/'>OWASP
          ASVS</a>
        - <a href="https://github.com/OWASP/owasp-masvs">OWASP MASVS</a>
        iso27001-2017:
        - hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 4
        measure: "Following frameworks like the\n  <ul>\n    <li>OWASP Application\
          \ Security Verification Standard Level 3</li>\n    <li>OWASP Mobile Application\
          \ Security Verification Standard Maturity Requirements</li>\n  </ul>\n \
          \ and gain around 95% coverage of both.\n"
        risk: Using an insecure application might lead to a compromised application.
          This might lead to total data theft or data modification.
        samm2: software-requirements|A|3
        usefulness: 4
    Infrastructure Hardening:
      2FA:
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 2
        implementation: Smartcard, YubiKey, SMS, TOTP
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 9.1.1
        - 9.4.2
        - 14.2.5
        level: 3
        measure: Two factor authentication for all privileged accounts on systems
          and applications
        risk: One factor authentication is more vulnerable to brute force attacks
          and is considered less secure.
        samm2: TODO
        usefulness: 4
      Applications are running in virtualized environments:
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 3
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 2
        measure: Applications are running in a dedicated and isolated virtualized
          environments.
        risk: Through a vulnerability in one service on a server, the attacker gains
          access to other services running on the same server.
        samm2: o-environment-management|A|1
        usefulness: 3
      Checking the sources of used libraries:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.1
        - 14.2.5
        level: 2
        measure: Each libraries source is checked to have a trusted source.
        risk: Application and system libraries can have implementation flaws or deployment
          flaws.
        samm: SA1-A
        samm2: o-environment-management|A|1
        usefulness: 3
      Filter outgoing traffic:
        dependsOn: []
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        implementation:
        - Open Policy Agent
        - firewalls
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 2
        measure: Having a whitelist and explizitly allowing egress traffic provides
          the ability to stop unauthorized data leackage.
        risk: A compromised infrastructure component might try to send out stolen
          data.
        samm2: o-environment-management|A|1
        usefulness: 2
      Immutable Infrastructure:
        dependsOn:
        - Infrastructure as Code
        - Usage of <a href="https://semver.org/">Semantic Versioning</a> for components
          like project images
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation: Remove direct access to infrastructure
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 17.2.1
        level: 3
        measure: Redundancies in the IT systems
        risk: The availability of IT systems might be disturbed due to components
          failures
        samm2: o-environment-management|A|1
        usefulness: 3
      Infrastructure as Code:
        difficultyOfImplementation:
          knowledge: 3
          resources: 4
          time: 5
        implementation: GitOps, Ansible, Chef, Puppet, Jenkinsfile
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.1
        - 12.1.2
        level: 3
        measure: Systems are setup by code. A full environment can be provisioned.
          In addition, software like Jenkins 2 can be setup and configured in in code
          too. The code should be stored in a version control system.
        risk: No tracking of changes in systems might lead to errors in the configuration.
          In additions, it might lead to unauthorized changes. An examples is jenkins.
        samm2: o-environment-management|A|1
        usefulness: 4
      Isolated networks for virtual environments:
        dependsOn: []
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        implementation:
        - istio
        - bridges
        - firewalls
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 1
        measure: The communication between virtual environments is controlled and
          regulated.
        risk: Virtual environments in default settings are able to access other virtual
          environments on the network stack. By using virtual machines, it is often
          possible to connect to other virtual machines. By using docker, one bridge
          is used by default so that all containers on one host can communicate with
          each other.
        samm2: o-environment-management|A|1
        usefulness: 5
      Limitation of system calls in virtual environments:
        dependsOn:
        - Applications are running in virtualized environments
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        implementation: seccomp, strace
        iso27001-2017:
        - system hardenong is not explicitly covered by ISO 27001 - too specific
        level: 4
        measure: System calls in virtual environments like docker are audited and
          limited.
        risk: System calls in virtual environments like docker can lead to privilege
          escalation.
        samm2: o-environment-management|A|1
        usefulness: 5
      Microservice-Architecture:
        difficultyOfImplementation:
          knowledge: 4
          resources: 5
          time: 5
        iso27001-2017:
        - not explicitly covered by ISO 27001
        level: 4
        measure: A microservice-architecture helps to have small components, which
          are more easy to test.
        risk: Monolithic applications are hard to test.
        samm: SA2
        samm2: o-environment-management|A|1
        usefulness: 3
      Production near environments are used by developers:
        dependsOn:
        - Defined deployment process
        - Infrastructure as Code
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        iso27001-2017:
        - 12.1.4
        - 17.2.1
        level: 4
        measure: Usage of infrastructure as code helps to create a production near
          environment. The developer needs to be trained in order to setup a local
          development environment. In addition, it should be possible to create production
          like test data. Often personal identifiable information is anonymized in
          order to comply with data protection laws.
        risk: In case an errors occurs in production, the developer need to be able
          to create a production near environment on a local development environment.
        samm: SA1
        samm2: o-environment-management|A|1
        usefulness: 4
      Role based authentication and authorization:
        dependsOn:
        - Defined deployment process
        - Defined build process
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 3
        implementation: Directory Service, Plugins
        iso27001-2017:
        - 9.4.1
        level: 3
        measure: The usage of a (role based) access control helps to restrict system
          access to authorized users.
        risk: Everyone is able to get unauthorized access to information on systems
          or to modify information unauthorized on systems.
        samm2: o-environment-management|A|1
        usefulness: 3
      Simple access control for systems:
        dependsOn:
        - Defined deployment process
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        implementation: HTTP-Basic Authentication, TLS, VPN
        iso27001-2017:
        - 9.4.1
        level: 1
        measure: All internal systems are using simple authentication
        risk: Attackers a gaining access to internal systems and application interfaces
        samm: EH1-B
        samm2: o-environment-management|A|1
        usefulness: 5
      The cluster is hardened:
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 3
        implementation:
        - <a href='https://www.cisecurity.org/cis-benchmarks/'>CIS Kubernetes Bench
          for Security</a>
        - <a href='https://www.cisecurity.org/cis-benchmarks/'>CIS Docker Bench for
          Security</a>
        - 'For example for Containers: Deny running containers as root, deny using
          advanced privileges, deny mounting of the hole filesystem, ...'
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 13.1.3
        level: 2
        measure: Harden cluster environments according to best practices. Level 1
          and partiually level 2 from hardening practices like 'CIS Kubernetes Bench
          for Security' should considered.
        risk: Using default configurations for a cluster environment leads to potential
          risks.
        samm2: o-environment-management|A|1
        usefulness: 4
      Usage of a chaos monkey:
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 5
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 17.1.3
        level: 4
        measure: A randomized periodically shutdown of systems makes sure, that nobody
          will perform manual changes to a system.
        risk: Due to manuel changes on a system, they are not replaceable anymore.
          In case of a crash it might happen that a planned redundant system is unavailable.
          In addition, it is hard to replay manual changes.
        samm2: o-environment-management|A|1
        usefulness: 3
      Usage of security by default for components:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 4
          resources: 1
          time: 3
        implementation: 'For applications: Check default encoding, managing secrets,
          crypto, authentication'
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        level: 2
        measure: Hardening of components is important, specially for image on which
          other teams base on. Hardening should be performed on the operation system
          and on the services inside (e.g. Nginx or a Java-Application).
        risk: Components (images, libraries, applications) are not hardened.
        samm2: o-environment-management|A|1
        usefulness: 3
      Usage of test and production environments:
        dependsOn:
        - Defined deployment process
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.4
        - 17.2.1
        level: 1
        measure: A production and a production like envirnoment is used
        risk: Security tests are not running regularly because test environments are
          missing
        samm2: o-environment-management|A|1
        usefulness: 4
      Virtual environments are limited:
        dependsOn:
        - Applications are running in virtualized environments
        difficultyOfImplementation:
          knowledge: 2
          resources: 3
          time: 2
        iso27001-2017:
        - virtual environments are not explicitly covered by ISO 27001 - too specific
        - 12.1.3
        - 13.1.3
        - 17.2.1
        level: 2
        measure: All virtual environments are using resource limits on hard disks,
          memory and CPU
        risk: Denial of service (internally by an attacker or unintentionally by a
          bug) on one service effects other services
        samm2: o-environment-management|A|1
        usefulness: 3
      versioning:
        dependsOn:
        - Defined deployment process
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.1
        - 12.1.2
        - 14.2.2
        level: 3
        measure: versioning of artifacts related to production environments. For example
          Jenkins configuration, docker images, system provisioning code.
        risk: Changes to production systems can not be undone.
        samm2: o-environment-management|A|1
        usefulness: 5
  InformationGathering:
    Logging:
      Centralized application logging:
        dependsOn:
        - Visualized logging
        - Alerting
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
        level: 3
        measure: A centralized logging system is used and applications logs (including
          application exceptions) are shipped to it.
        risk: Local stored logs can be unauthorized manipulated by attackers with
          system access or might be corrupt after an incident. In addition, it is
          hard to perform an correlation of logs. This leads attacks, which can be
          performed silently.
        samm: SA2-B
        samm2: o-incident-management|A|1
        usefulness: 5
      Centralized system logging:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: rsyslog, Logstash
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
        level: 1
        measure: By using centralized logging logs are protected against unauthorized
          modification.
        risk: Local stored system logs can be unauthorized manipulated by attackers
          or might be corrupt after an incident. In addition, it is hard to perform
          a aggregation of logs.
        samm2: o-incident-management|A|1
        usefulness: 2
      Correlation of security events:
        dependsOn:
        - Visualized logging
        - Alerting
        difficultyOfImplementation:
          knowledge: 4
          resources: 4
          time: 4
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
        level: 4
        measure: Events are correlated on one system. For example the correlation
          and visualisation of failed login attempts combined with successful login
          attempts.
        risk: Detection of security related events with hints on different systems/tools/metrics
          is not possible.
        samm2: o-incident-management|A|2
        usefulness: 3
      Logging of security events:
        dependsOn:
        - PII logging concept
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: rsyslog, logstash, fluentd, bash
        iso27001-2017:
        - 12.4.1
        level: 1
        measure: Security-relevant events like login/logout or creation, change, deletion
          of users should be logged.
        risk: No track of security-relevant events makes it harder to analyse an incident.
        samm2: o-incident-management|A|1
        usefulness: 4
      PII logging concept:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: rsyslog, logstash, fluentd, bash
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
        - 18.1.1
        level: 1
        measure: A concept how to log PII is documented and applied.
        risk: Personal identifiable information (PII) is logged and the law of GDPR
          is not followed.
        samm2: o-incident-management|A|1
        usefulness: 1
      Visualized logging:
        dependsOn:
        - Centralized system logging
        - Centralized application logging
        difficultyOfImplementation:
          knowledge: 1
          resources: 3
          time: 3
        implementation: ELK-Stack
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.4.1
        level: 2
        measure: Protocols are visualized in a simple to use real time monitoring
          system. The GUI gives the ability to search for special attributes in the
          protocol.
        risk: System and application protocols are not visualized properly which leads
          to no or very limited logging assessment. Specially developers might have
          difficulty to read applications logs with unusually tools like the Linux
          tool 'cat'
        samm2: o-incident-management|A|1
        usefulness: 4
    Monitoring:
      Advanced availablity and stability metrics:
        dependsOn:
        - Simple application metrics
        - Visualized metrics
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 3
        iso27001-2017:
        - 12.1.3
        level: 3
        measure: Advanced metrics are gathered in relation to availability and stability.
          For example unplanned downtime's per year.
        risk: Trends and advanced attacks are not detected.
        samm2: o-incident-management|A|2
        usefulness: 4
      Advanced webapplication metrics:
        dependsOn:
        - Simple application metrics
        - Visualized metrics
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 3
        iso27001-2017:
        - 12.6.1
        level: 3
        measure: All defects from the dimension Test- and Verification are instrumented.
        risk: People are not looking into tests results. Vulnerabilities not recolonized,
          even they are detected by tools.
        samm2: o-incident-management|A|2
        usefulness: 4
      Alerting:
        dependsOn:
        - Visualized metrics
        difficultyOfImplementation:
          knowledge: 2
          resources: 5
          time: 5
        iso27001-2017:
        - 16.1.2
        - 16.1.4
        - 12.1.4
        level: 2
        measure: 'Thresholds for metrics are set. In case the thresholds are reached,
          alarms are send out. Which should get attention due to the critically.

          '
        risk: Incidents are discovered after they happend.
        samm: OE1-B
        samm2: o-operational-management|B|3
        usefulness: 5
      Coverage and control metrics:
        dependsOn:
        - Visualized metrics
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 5
        implementation: https://ht.transparencytoolkit.org/FileServer/FileServer/OLD%20Fileserver/books/SICUREZZA/Addison.Wesley.Security.Metrics.Mar.2007.pdf
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        level: 4
        measure: "Usage of Coverage- and control-metrics to show the effectiveness\
          \ of the security program. Coverage is the degree in \n        which a specific\
          \ security control for a specific target group is applied with all resources.\n\
          \        The control degree shows the actual application of security standards\
          \ and security-guidelines. Examples are gathering information on anti-virus,\
          \ anti-rootkits, patch management, server configuration and vulnerability\
          \ management."
        risk: The effectiveness of configuration, patch and vulnerability management
          is unknown.
        samm2: o-incident-management|A|2
        usefulness: 4
      Deactivation of unused metrics:
        dependsOn:
        - Visualized metrics
        difficultyOfImplementation:
          knowledge: 2
          resources: 5
          time: 5
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.3
        level: 3
        measure: Deactivation of unused metrics helps to free resources.
        risk: High resources are used while gathering unused metrics.
        samm2: o-incident-management|A|1
        usefulness: 5
      Defence metrics:
        dependsOn:
        - Visualized metrics
        - Filter outcoing traffic
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 5
        iso27001-2017:
        - 12.4.1
        - 13.1.1
        level: 4
        measure: 'Gathering of defence metrics like TCP/UDP sources enables to assume
          the geographic location of the request.

          Assuming a Kubernetes cluster with an egress-traffic filter (e.g. IP/domain
          based), an alert might be send out in case of every violation. For ingress-traffic,
          alerting might not even be considered.

          '
        risk: IDS/IPS systems like packet- or application-firewalls detect and prevent
          attacks. It is not known how many attacks has been detected and blocked.
        samm2: o-incident-management|A|2
        usefulness: 4
      Grouping of metrics:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 4
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.1.3
        level: 3
        measure: Meaningful grouping of metrics helps to speed up analysis.
        risk: The analysis of metrics takes long.
        samm2: o-incident-management|A|2
        usefulness: 2
      Metrics are combined with tests:
        dependsOn:
        - Grouping of metrics
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001
        level: 4
        measure: Metrics during tests helps to identify programming errors.
        risk: Changes might cause high load due to programming errors.
        samm2: o-incident-management|A|2
        usefulness: 5
      Screens with metric visualization:
        dependsOn:
        - Grouping of metrics
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.5
        level: 4
        measure: By having an internal accessible screen with a security related dashboards
          helps to visualize incidents.
        risk: Security related information is discovered too late during an incident.
        samm2: o-incident-management|A|2
        usefulness: 5
      Simple application metrics:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 2
        implementation: Prometheus
        iso27001-2017:
        - 12.4.1
        level: 1
        measure: Gathering of application metrics helps to identify incidents like
          brute force attacks, login/logout.
        risk: Attacks on an application are not recognized.
        samm2: o-incident-management|A|1
        usefulness: 5
      Simple system metrics:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 2
        implementation: collectd
        iso27001-2017:
        - 12.1.3
        level: 1
        measure: Gathering of system metrics helps to identify incidents and specially
          bottlenecks like in CPU usage, memory usage and hard disk usage.
        risk: Without simple metrics analysis of incidents are hard. In case an application
          uses a lot of CPU from time to time, it is hard for a developer to find
          out the source with linux commands.
        samm2: o-incident-management|A|1
        usefulness: 5
      Targeted alerting:
        dependsOn:
        - Alerting
        difficultyOfImplementation:
          knowledge: 2
          resources: 5
          time: 5
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.5
        level: 3
        measure: By the definition of target groups for incidents people are only
          getting alarms for incidents they are in charge for.
        risk: People are bored (ignorant) of incident alarm messages, as they are
          not responsible to react.
        samm: OE1-B
        samm2: o-operational-management|B|3
        usefulness: 5
      Visualized metrics:
        dependsOn:
        - Simple application metrics
        - Simple system metrics
        difficultyOfImplementation:
          knowledge: 1
          resources: 2
          time: 2
        iso27001-2017:
        - 12.1.3
        level: 2
        measure: Metrics are visualized in real time in a user friendly way.
        risk: Not visualized metrics lead to restricted usage of metrics.
        samm2: o-incident-management|A|2
        usefulness: 3
  TestAndVerification:
    Application tests:
      High coverage of security related module and integration tests:
        difficultyOfImplementation:
          knowledge: 5
          resources: 3
          time: 5
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 4
        measure: Implementation of security related tests via unit tests and integration
          tests. Including the test of libraries, in case the are not tested already.
        risk: Vulnerabilities are rising due to code changes in a complex microservice
          environment in not important components.
        samm: ST2-B
        samm2: v-security-testing|B|3
        usefulness: 3
      Security integration tests for important components:
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 4
        implementation: HttpUnit
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 3
        measure: Implementation of essential security related integration tests. For
          example for authentication and authorization.
        risk: Vulnerabilities are rising due to code changes in a complex microservice
          environment.
        samm: ST2-B
        samm2: v-security-testing|B|3
        usefulness: 2
      Security unit tests for important components:
        comment: The integration of module tests takes place during development instead,
          it highlights vulnerabilities in sub-routines, functions, modules, libraries
          etc. checked.
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 4
        implementation:
        - JUnit
        - <a href='https://karma-runner.github.io'>Karma</a>
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 2
        measure: Usage of unit tests to test important security related features like
          authentication and authorization.
        risk: Vulnerabilities are rising due to code changes.
        samm: ST2-B
        samm2: v-security-testing|B|3
        usefulness: 3
      Smoke Test:
        dependsOn:
        - Defined deployment process
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 2
        implementation: ''
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 4
        measure: Integration tests are performed against the production environment
          after each deployment.
        risk: During a deployment an error might happen which leads to non-availability
          of the system, a part of the system or a feature.
        samm: ST2-B
        samm2: v-security-testing|B|3
        usefulness: 2
    Consolidation:
      Advanced visualization of defects:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 4
        implementation:
        - <a href="https://github.com/DefectDojo/django-DefectDojo">OWASP Defect Dojo</a>
        - <a href="https://github.com/faloker/purify/">Purify</a>
        iso27001-2017:
        - 16.1.4
        - 8.2.1
        - 8.2.2
        - 8.2.3
        level: 4
        measure: Findings are visualized per component/project/team.
        risk: Correlation of the vulnerabilities of different tools to have an overview
          of the the overall security level per component/project/team is not given.
        samm2: defect-management|B|1
        usefulness: 2
      Definition of quality gates:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: See other actions, e.g. "Treatment of defects with severity
          high".
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 16.1.4
        level: 1
        measure: Quality gates for found vulnerabilities are defined. In the start
          it is important to not overload the security analyst, therefore the recommendation
          is to start with alerting of high cirital vulnerabilities.
        risk: Improper examination of vulnerabilities leads to no visibility at all.
        samm: IR2-A
        samm2: i-defect-management|A|2
        usefulness: 4
      Integration of vulnerability issues into the development process:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation: 'At SAST (Static Application Security Testing): Server-side
          / client-side teams can easily be recorded. With microservice architecture,
          individual microservices can be used usually Teams. At DAST (Dynamic Application
          Security Testing): vulnerabilities are classified and can be assigned to
          server-side and client-side teams.'
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.4
        - 16.1.5
        - 16.1.6
        level: 3
        measure: Vulnerabilities are tracked in the teams issue system (e.g. jira).
        risk: To read console output of the build server to search for vulnerabilities
          might be difficult. Also, to check a vulnerability management system might
          not be a daily task for a developer.
        samm2: i-defect-management|B|2
        usefulness: 2
      Reproducible defect tickets:
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 2
        implementation: <a href='https://github.com/mozilla/zest'>Mozilla Zest</a>
        iso27001-2017:
        - 16.1.4
        - 8.2.1
        - 8.2.2
        - 8.2.3
        level: 4
        measure: Vulnerabilities include the test procedure to give the staff from
          operations and development the ability to reproduce vulnerabilities. This
          enhances the understanding of vulnerabilities and therefore the fix have
          a higher quality.
        risk: Vulnerability descriptions are hard to understand by staff from operations
          and development.
        samm2: i-defect-management|B|2
        usefulness: 2
      Simple false positive treatment:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation:
        - <a href="https://github.com/DefectDojo/django-DefectDojo">OWASP Defect Dojo</a>
        - <a href="https://github.com/faloker/purify/">Purify</a>
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 16.1.6
        level: 1
        measure: False positives are suppressed so they will not show up on the next
          tests again. Most security tools have the possibility to suppress false
          positives. A Vulnerability Management System might be used.
        risk: As false positive occure during each test, all vulnerabilities might
          be ignored.
        samm: IR2-A
        samm2: i-defect-management|A|2
        usefulness: 4
      Simple visualization of defects:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation:
        - OWASP Dependency Check Jenkins Plugin
        - LogParser Jenkins Plugins
        - <a href="https://github.com/DefectDojo/django-DefectDojo">OWASP Defect Dojo</a>
        - <a href="https://github.com/faloker/purify/">Purify</a>
        iso27001-2017:
        - 16.1.4
        - 8.2.1
        - 8.2.2
        - 8.2.3
        level: 2
        measure: Vulnerabilities are simple visualized.
        risk: The security level of a component is not visible. Therefore, the motivation
          to enhance the security is not give.
        samm2: i-defect-management|B|1
        usefulness: 3
      Treatment of all defects:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 2
        iso27001-2017:
        - 16.1.4
        - 12.6.1
        level: 4
        measure: All vulnerabilities are added to the quality gate.
        risk: Vulnerabilities with severity low are not visible.
        samm2: i-defect-management|B|2
        usefulness: 2
      Treatment of defects with severity high or higher:
        comment: False positive analysis, specially for static analysis, is time consuming.
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        iso27001-2017:
        - 16.1.4
        - 12.6.1
        level: 1
        measure: Vulnerabilities with severity high or higher are added to the quality
          gate.
        risk: Vulnerabilities with severity high or higher are not visible.
        samm2: i-defect-management|B|2
        usefulness: 4
      Treatment of defects with severity middle:
        comment: False positive analysis, specially for static analysis, is time consuming.
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        iso27001-2017:
        - 16.1.4
        - 12.6.1
        level: 3
        measure: Vulnerabilities with severity middle are added to the quality gate.
        risk: Vulnerabilities with severity middle are not visible.
        samm2: i-defect-management|B|2
        usefulness: 3
      Usage of a vulnerability management system:
        difficultyOfImplementation:
          knowledge: 3
          resources: 2
          time: 3
        implementation:
        - <a href="https://github.com/DefectDojo/django-DefectDojo">OWASP Defect Dojo</a>
        - <a href="https://github.com/faloker/purify/">Purify</a>
        iso27001-2017:
        - 12.6.1
        - 16.1.3
        - 16.1.4
        - 16.1.5
        - 16.1.6
        level: 4
        measure: Aggregation of vulnerabilities in one tool reduce the workload to
          mark false positives.
        risk: Maintenance of false positives in each tool enforces a high workload.
          In addition a correlation of the same finding from different tools is not
          possible.
        samm2: i-defect-management|B|1
        usefulness: 2
    Dynamic depth for applications:
      Coverage analysis:
        difficultyOfImplementation:
          knowledge: 4
          resources: 3
          time: 5
        implementation: OWASP Code Pulse
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - part of periodic review, PDCA
        level: 4
        measure: Check that there are no missing paths in the application with coverage-tools.
        risk: Parts of the service are not still covered.
        samm2: v-security-testing|A|2
        usefulness: 4
      Coverage of client side dynamic components:
        dependsOn:
        - Usage of different roles
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        implementation: Ajax Spider
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 2
        measure: Usage of a spider which executes dynamic content like JavaScript,
          e.g. via Selenium.
        risk: Parts of the service are not covered during the scan, because JavaScript
          is not getting executed. Therefore, the co
        samm: ST-2
        samm2: v-security-testing|A|2
        usefulness: 4
      Coverage of hidden endpoints:
        dependsOn:
        - Usage of different roles
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 2
        implementation: cURL, OpenAPI
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        level: 3
        measure: Hidden endpoints are getting detected and included in the vulnerability
          scan.
        risk: Hidden endpoints of the service are not getting tracked.
        samm2: v-security-testing|A|2
        usefulness: 5
      Coverage of more input vectors:
        dependsOn:
        - Usage of different roles
        difficultyOfImplementation:
          knowledge: 5
          resources: 1
          time: 5
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        level: 3
        measure: Special parameter and special encodings are defined, so that they
          get fuzzed by the used vulnerability scanners.
        risk: Parts of the service are not covered. For example specially formatted
          or coded parameters are not getting detected as parameter (e.g. parameters
          in REST-like URLs, parameters in JSON-Format or base64-coded parameters).
        samm2: v-security-testing|A|2
        usefulness: 4
      Coverage of sequential operations:
        dependsOn:
        - Usage of different roles
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        implementation: cURL
        iso27001-2017:
        - 14.2.8
        - 14.2.3
        level: 3
        measure: Sequential operations are defined and checked by the vulnerability
          scanner in the defined order.
        risk: Sequential operations like workflows (e.g. login -> put products in
          the basket
        samm2: v-security-testing|A|2
        usefulness: 5
      Coverage of service to service communication:
        dependsOn:
        - Simple Scan
        difficultyOfImplementation:
          knowledge: 4
          resources: 2
          time: 5
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 4
        measure: Service to service communication is dumped and checked.
        risk: Service to service communication is not covered.
        samm2: v-security-testing|A|2
        usefulness: 3
      Simple Scan:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 3
        implementation:
        - OWASP Zap
        - Arachni
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        level: 1
        measure: A simple scan is performed to get a security baseline. In case the
          test is done in under 10 minutes, it should be part of the build and deployment
          process.
        risk: Deficient security tests are performed. Simple vulnerabilities are not
          detected and missing security configurations (e.g. headers) are not set.
          Fast feedback is not given.
        samm: ST2
        samm2: v-security-testing|A|1
        usefulness: 2
      Usage of different roles:
        dependsOn:
        - Simple Scan
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.3
        - 14.2.8
        level: 2
        measure: Integration of authentication with all roles used in the service.
        risk: Parts of the service are not covered during the scan, because a login
          is not performed.
        samm2: v-security-testing|A|2
        usefulness: 2
      Usage of multiple scanners:
        dependsOn:
        - Usage of different roles
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 3
        implementation: SecureCodeBox
        iso27001-2017:
        - 12.6.1
        - 14.2.5
        level: 3
        measure: Usage of multiple spiders and scanner enhance the coverage and the
          vulnerabilities.
        risk: Each vulnerability scanner has different opportunities. By using just
          one scanner, some vulnerabilities might not be found.
        samm2: v-security-testing|A|2
        usefulness: 1
    Dynamic depth for infrastructure:
      Load tests:
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 2
        iso27001-2017:
        - 12.1.3
        - 14.2.3
        - 14.2.8
        level: 4
        measure: Load test against the production system or a production near system
          is performed.
        risk: As it is unknown how many requests the systems and applications can
          serve, due to an unexpected load the availability is disturbed.
        samm2: v-security-testing|A|1
        usefulness: 3
      Test for exposed services:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation:
        - nmap
        - <a href="https://github.com/OWASP/Amass">OWASP Amass</a>
        iso27001-2017:
        - 13.1.3
        - 14.2.3
        - 14.2.8
        level: 1
        measure: With the help of tools the network configuration of unintenonal exposed
          cluster(s) are tested. To identify clusters, all subdomains might need to
          be identified with a tool like OWASP Amass to perform portscans based o
          the result.
        risk: Standard network segmentation and firewalling has not been performed,
          leading to world open cluster management ports.
        samm: EH2-B
        samm2: v-security-testing|A|1
        usefulness: 3
      Test network segmentation:
        dependendsOn: Segmented networks for virtual environments
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation: <a href="https://github.com/controlplaneio/netassert">netassert</a>
        iso27001-2017:
        - 13.1.3
        - 14.2.3
        - 14.2.8
        level: 2
        measure: Cluster interal test needs to be performed. Integration of fine granulated
          network segmenation (also between pods in the same namespace).
        risk: Wrong or no network segmentation of pods makes it easyer for an attacker
          to access a database and extract or modify data.
        samm2: v-security-testing|A|2
        usefulness: 3
      Test of the configuration of cloud environments:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation:
        - <a href='https://github.com/aquasecurity/kube-hunter'>kube-hunter</a>
        - openVAS
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
        level: 2
        measure: With the help of tools the configuration of virtual environments
          are tested.
        risk: Standard hardening practices for cloud environments are not performed
          leading to vulnerabilities.
        samm: EH2-B
        usefulness: 4
      Weak password test:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        implementation: HTC Hydra
        iso27001-2017:
        - 9.4.3
        level: 3
        measure: Automatic brute force attacks are performed. Specially the usage
          of standard accounts like 'admin' and employee user-ids is recommended.
        risk: Weak passwords in components like applications or systems, specially
          for privileged accounts, lead to take over of that account.
        samm2: v-security-testing|A|2
        usefulness: 1
    Static depth for applications:
      Exclusion of source code duplicates:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: PMD
        iso27001-2017:
        - not explicitly covered by ISO 27001 - too specific
        - 14.2.1
        - 14.2.5
        level: 4
        measure: Automatic Detection and manual removal of duplicates in source code.
        risk: Duplicates in source code might influence the stability of the application.
        samm2: v-security-testing|A|2
        usefulness: 1
      Static analysis for all components/libraries:
        dependsOn:
        - Static analysis for important client side components
        - Static analysis for important server side components
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 4
        iso27001-2017:
        - 12.6.1
        level: 4
        measure: Usage of a static analysis for all used components.
        risk: Used components like libraries and legacy applications might have vulnerabilities
        samm2: v-security-testing|A|2
        usefulness: 3
      Static analysis for all self written components:
        dependsOn:
        - Static analysis for important client side components
        - Static analysis for important server side components
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation: eslint, FindSecurityBugs, jsprime
        iso27001-2017:
        - 12.6.1
        level: 4
        measure: Usage of static analysis tools for all parts of the middleware and
          frontend. Static analysis uses for example string matching algorithms and/or
          dataflow analysis.
        risk: Parts in the source code of the frontend or middleware have vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 4
      Static analysis for important client side components:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation:
        - eslint
        - FindSecurityBugs
        - jsprime
        - <a href='https://github.com/ing-bank/bdd-mobile-security-automation-framework'>bdd-mobile-security-automation-framework</a>
        iso27001-2017:
        - 12.6.1
        level: 3
        measure: Usage of static analysis tools for important parts of the frontend
          are used. Static analysis uses for example string matching algorithms and/or
          dataflow analysis.
        risk: Important parts in the source code of the frontend have vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 3
      Static analysis for important server side components:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation: eslint, FindSecurityBugs, jsprime
        iso27001-2017:
        - 12.6.1
        level: 2
        measure: Usage of static analysis tools for important parts of the middleware
          are used. Static analysis uses for example string matching algorithms and/or
          dataflow analysis.
        risk: Important parts in the source code of the middleware have vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 4
      Stylistic analysis:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: PMD
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
        level: 4
        measure: Analysis of compliance to style guides of the source code ensures
          that source code indenting rules are met.
        risk: False source code indenting might lead to vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 1
      Test of client side components with known vulnerabilities:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 2
        implementation:
        - <a href="https://github.com/RetireJS/retire.js/">retire.js</a>
        - <a href="https://docs.npmjs.com/cli/audit">npm audit</a>
        iso27001-2017:
        - 12.6.1
        level: 3
        measure: Tests for known vulnerabilities in components of the frontend are
          performed.
        risk: Client side components might have vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 2
      Test of server side components with known vulnerabilities:
        dependsOn:
        - Defined build process
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 2
        implementation: OWASP Dependency Check
        iso27001-2017:
        - 12.6.1
        level: 1
        measure: Tests for known vulnerabilities in server side components (e.g. backend/middleware)
          are performed.
        risk: Server side components might have vulnerabilities.
        samm: SA
        samm2: v-security-testing|A|2
        usefulness: 5
      Usage of multiple analysers:
        dependsOn:
        - Test of server side components with known vulnerabilities
        - Test of client side components with known vulnerabilities
        - Static analysis for all self written components
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 3
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
        level: 4
        measure: Usage of multiple static tools to find more vulnerabilities.
        risk: Each vulnerability analyser has different opportunities. By using just
          one analyser, some vulnerabilities might not be found.
        samm2: v-security-testing|A|3
        usefulness: 1
    Static depth for infrastructure:
      Analyse logs:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 2
        implementation:
        - https://github.com/Neo23x0/sigma
        level: 3
        measure: Check logs for keywords.
        risk: Not getting are of happend attacks.
        usefulness: 3
      Check for image lifetime:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        implementation: null
        iso27001-2017:
        - 12.6.1
        - 14.2.5
        level: 3
        measure: Check the image age of containers in production.
        risk: Old container images in production indicate that patch management is
          not performed and therefore vulnerabilities might exists.
        samm2: v-security-testing|A|1
        usefulness: 2
      Check for known vulnerabilities:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 1
        implementation:
        - https://github.com/aquasecurity/trivy
        - Registries like quay, dockerhub provide (commercial) offerings, often not
          suiteable for distroless images
        iso27001-2017:
        - 12.6.1
        level: 4
        measure: Check for known vulnerabilities
        risk: Known vulnerabilities in infrastructure components like container images
          might get exploited.
        samm2: v-security-testing|A|2
        usefulness: 4
      Check for malware:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 2
        implementation: null
        iso27001-2017:
        - 12.2.1
        level: 3
        measure: Check for malware in components (e.g. container images, VM baseline
          images, libaries).
        risk: Third party might include  malware. Ether due to the maintainer (e.g.
          typo squatting of an image name and using the wrong image) or by an attacker
          on behalf of the maintainer with stolen credentials.
        samm2: v-security-testing|A|2
        usefulness: 3
      Check for new image version:
        difficultyOfImplementation:
          knowledge: 3
          resources: 1
          time: 3
        implementation: null
        iso27001-2017:
        - 12.6.1
        - 14.2.5
        - 12.2.1
        level: 3
        measure: Check for new images of containers in production.
        risk: When a new version of an image is available, it might fixes security
          vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 2
      Correlate known vulnerabilities in infrastructure with new image versions:
        dependsOn:
        - Usage of a maximum lifetime for images
        difficultyOfImplementation:
          knowledge: 2
          resources: 4
          time: 5
        implementation:
        - Anchore.io
        - Clair
        - OpenSCAP
        - <a href='https://github.com/future-architect/vuls'>Vuls</a>
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        level: 4
        measure: TODO
        risk: TODO.
        samm2: v-security-testing|A|1
        usefulness: 1
      Stored Secrets:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 1
        implementation:
        - <a href="https://github.com/dxa4481/truffleHog">truffleHog</a>
        - <a href="https://github.com/nccgroup/go-pillage-registries">go-pillage-registries</a>
        iso27001-2017:
        - vcs usage is not explicitly covered by ISO 27001 - too specific
        - 9.4.3
        - 10.1.2
        level: 1
        measure: Test for secrets in code, container images and history
        risk: Stored secrets in git history, in container images or directly in code
          shouldn't exists because they might be read unauthorized.
        samm2: v-security-testing|A|1
        usefulness: 2
      Test cluster deployment resources:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 1
        implementation:
        - <a href="https://kubesec.io/">kubesec</a>
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
        level: 2
        measure: Test the deployment configuration for virtualized environments for
          unsecured configurations.
        risk: The deployment configuration (e.g. kubernetes deployment resources)
          might contain unsecured configurations.
        samm2: v-security-testing|A|1
        usefulness: 3
      Test of infrastructure components for known vulnerabilities:
        dependsOn:
        - Usage of a maximum lifetime for images
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 5
        implementation:
        - Anchore.io
        - Clair
        - OpenSCAP
        - <a href='https://github.com/future-architect/vuls'>Vuls</a>
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        level: 4
        measure: Test for known vulnerabilities in infrastructure components. Often,
          the only way to respond to known vulnerabilities in operating system packages
          is to accept the risk and wait for a patch. As the patch needs to be applied
          fast when it is available, this activity depends on 'Usage of a maximum
          life for images'.
        risk: Infrastructure components might have vulnerabilities.
        samm2: v-security-testing|A|1
        usefulness: 1
      Test of virtualized environments:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 1
        implementation:
        - <a href="https://github.com/wagoodman/dive">Dive to inspect a container
          images</a>
        - Cluster Scanner (will be open sourced soon) to check different aspects
        level: 2
        measure: Test virtualized environments for unsecured configurations.
        risk: Virtualized environments (e.g. via <i>Container Images</i>) might contains
          unsecure configurations.
        samm2: v-security-testing|A|1
        usefulness: 3
      Test the clould configuration:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 2
        implementation:
        - <a href="https://github.com/aquasecurity/kube-bench">kube-bench</a>
        iso27001-2017:
        - system hardening is not explicitly covered by ISO 27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
        level: 2
        measure: With the help of tools the configuration of virtual environments
          are tested.
        risk: Standard hardening practices for cloud environments are not performed
          leading to vulnerabilities.
        samm: EH2-B
        samm2: v-security-testing|A|1
        usefulness: 4
      Test the definition of virtualized environments:
        difficultyOfImplementation:
          knowledge: 2
          resources: 2
          time: 1
        implementation:
        - <a href="https://github.com/hadolint/hadolint">Dockerfile with hadolint</a>
        - <a href="https://github.com/zegl/kube-score">Deployment with kube-score</a>
        iso27001-2017:
        - system hardening, virtual environments are not explicitly covered by ISO
          27001 - too specific
        - 12.6.1
        - 14.2.3
        - 14.2.8
        - 14.2.1
        level: 2
        measure: Test the definition of virtualized environments for unsecured configurations.
        risk: The definition of virtualized environments (e.g. via <i>Dockerfile</i>)
          might contains unsecure configurations.
        samm2: v-security-testing|A|1
        usefulness: 3
    Test-Intensity:
      Creation and application of a testing concept:
        difficultyOfImplementation:
          knowledge: 3
          resources: 3
          time: 3
        iso27001-2017:
        - 14.2.2
        - 14.2.3
        - 14.2.1
        - 14.2.5
        - 12.6.1
        level: 3
        measure: A testing concept considering the amount of time per scan/intensity
          is created and applied. A dynamic analysis needs more time than a static
          analysis. The dynamic scan, depending on the test intensity might be performed
          on every commit, every night, every week or once in a month.
        risk: Scans might use a too small or too high test intensity.
        samm2: v-security-testing|A|2
        usefulness: 2
      Deactivating of unneeded tests:
        difficultyOfImplementation:
          knowledge: 2
          resources: 1
          time: 3
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
        level: 2
        measure: Unneeded tests are deactivated. For example in case the service is
          using a Mongo database and no mysql database, the dynamic scan doesn't need
          to test for sql injections.
        risk: As tools cover a wide range of different vulnerability tests, they might
          not match the used components. Therefore, they need more time and resources
          as they need and the feedback loops takes too much time.
        samm2: v-security-testing|A|2
        usefulness: 1
      Default settings for intensity:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
        level: 1
        measure: The intensity of the used tools are not modified to safe time.
        risk: Time pressure and ignorance might lead to false predictions for the
          test intensity.
        samm2: v-security-testing|A|1
        usefulness: 1
      High test intensity:
        difficultyOfImplementation:
          knowledge: 3
          resources: 5
          time: 3
        iso27001-2017:
        - 12.6.1
        - 14.2.1
        - 14.2.5
        level: 1
        measure: A deep scan with high test intensity and a low confidence threshold
          is performed.
        risk: A too small intensity or a too high confidence might lead to not visible
          vulnerabilities.
        samm2: v-security-testing|A|2
        usefulness: 3
      Regular tests:
        difficultyOfImplementation:
          knowledge: 1
          resources: 1
          time: 1
        implementation: ''
        iso27001-2017:
        - 14.2.3
        - 14.2.8
        - 14.2.9
        level: 2
        measure: On each push and/or at given intervals automatic security tests are
          performed.
        risk: After pushing source code to the version control system, any delay in
          receiving feedback on defects makes them harder for the developer to remediate.
        samm2: i-secure-build|A|3
        usefulness: 2
