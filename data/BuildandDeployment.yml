---
Build:
  Building and testing of artifacts in virtual environments:
    risk: While building artifacts and testing artifacts, third party systems,applications,frameworks
      and libaries are used. These might be malisouse because they include mailouse
      libaries or because they are changed during the delivery.
    measure: Each step during the build and testing is done in a separate virtual
      environments, which gets destroyed afterwards.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: Docker
    dependsOn:
    - Defined build process
    securityProperties:
      integrity: ""
  Defined build process:
    risk: Conduction of builds without a defined process are highly prone to errors.
      For example wrong setting of security related configuration.
    measure: A defined build process lowers the possibility of errors during the build
      a lot.
    hardnessOfImplementation:
      knowledge: 2
      time: 3
      resources: 2
    usefulness: 4
    level: 1
    implementation: Jenkins, Docker
    securityProperties:
      availability: Due to a less error prone build the availability is increased.
      integrity: The possibility of unintentionally data loss is decreased.
  Regular tests:
    risk: A time cap between pushing source code to the version control system and
      feedback regarding defects makes it harder to correct the found defects. A developer
      or system administrator has to dig into the complex change again.
    measure: On each push and/or periodically automatic tests are conducted.
    hardnessOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 2
    level: 2
    implementation: ""
    dependsOn:
    - Defined build process
    securityProperties:
      integrity: As feedback comes fast, defects can be addressed fast. Less defects
        will be deployed to production.
  Signing of artifacts:
    risk: Unauthorized manipulation of artifacts might not be recognized. For example
      pushing of an image with malicious code in the Docker registry.
    measure: Signing of artifacts helps to ensure that artifacts are not unauthorized
      manipulated.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: ""
    dependsOn:
    - Defined build process
    securityProperties:
      integrity: Through signing the integrity of artifacts is ensured.
    samm: OA3-B
Deployment:
  Backup before deployment:
    risk: During a deployment process there might be errors, so that you want to deploy
      an old release. Due to changes in the database, this is often not possible.
    measure: Automatic backups before deployment helps to reduce the fear to perform
      deployments. The restore processes is tested also.
    hardnessOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: A complete backup of the database might be performed. For bigger
      environments, a Point in Time Recovery for databases should be implemented.
    dependsOn:
    - Defined deployment process
    securityProperties:
      availability: Due to a fast restore processes, the availability is increased.
      integrity: A backup can be compared with the actual data to identify unintended
        changes after an incident.
    samm: OE2-A
  Blue/Green Deployment:
    risk: A new version of an artifact can have unknown defects.
    measure: By having two or more production environments, a deployment can be performent
      on one first to see possible defects before it is deployment on the other production
      environment(s)
    hardnessOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 2
    level: 4
    implementation: <a href='https://martinfowler.com/bliki/BlueGreenDeployment.html'>Blue/Green
      Deployments</a>
    dependsOn:
    - Smoke Test
    securityProperties:
      availability: Less downtime due to defects.
  Defined deployment process:
    risk: Deployments without a defined process are highly prone to errors. For example
      an old artifact is getting deployed or an untested artifact is getting deployed.
    measure: A defined deployment process lowers the possibility of errors during
      the deployment a lot.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 1
    implementation: Jenkins, Docker
    securityProperties:
      availability: Due to a less error prone deployment the availability is increased.
      integrity: The possibility of unintentionally data loss during deployment is
        decreased.
  Environment depending configuration parameters:
    risk: Attackers who compromise source code can see confidential access information
      like database credentials.
    measure: Configuration parameters are set for each environment not in the source
      code.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: ""
    securityProperties:
      confidentiality: Only authorized persons get access to confidential credentials
        and therefore to confidential information.
      integrity: Only authorized persons get access to confidential credentials and
        therefore not the ability to modify information unauthorized.
    samm: SA2-A
  Handover of confidential parameters:
    risk: Attackers who compromise a system can see confidential access information
      like database credentials. Parameters are often used to set credentials, for
      example by starting containers or applications. These parameters can often be
      seen by any one looking at the running processes on that system.
    measure: By using encryption, it is not possible to read credentials easily, e.g.
      from the file system. Also the usage of a credential management system can help
      to protect credentials.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation: ""
    dependsOn:
    - Environment depending configuration parameters
    securityProperties:
      confidentiality: Only authorized persons get access to confidential credentials
        and therefore to confidential information.
      integrity: Only authorized persons get access to confidential credentials and
        therefore not the ability to modify information unauthorized.
    samm: SA2-A
  Rolling update on deployment:
    risk: While a deployment is performed, the application can not be reached.
    measure: A deployment without downtime is performed.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 3
    implementation: Docker, Webserver, rolling update
    dependsOn:
    - Defined deployment process
    securityProperties:
      availability: No downtime during deployment
  Same artifact for environments:
    risk: Building of an artifact for different environments means that a not tested
      artifact might reach the production environment
    measure: Building an artifact once and deploy it to different environments means
      that only tested artifacts reach the production environment
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation: Docker
    securityProperties:
      integrity: Only for vulnerability automated tested artifacts can reach the production
        environment. The possibility of security related defects which affect the
        intigrity is lowered.
      availability: Only automated tested artifacts can reach the production environment.
        The possibility of defects which affect the avilailbity is lowered.
    dependsOn:
    - Defined build process
    samm:
    - OE2-A
  Usage of feature toggles:
    risk: By using environment dependent configuration, some parameters will not be
      tested correctly. An example for environment dependend configuration is <pre>if
      (host == 'production') {} else {}</pre>
    measure: Usage of enviornment independend configration parameter, called feature
      toggles, helps to enhance the test coverage.
    hardnessOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 2
    level: 3
    implementation: Docker
    securityProperties:
      availability: Through the same actions in different enviroments the likelihood
        of unpredictable behaivor is reduced.
    dependsOn:
    - Same artifact for environments
    samm: EG1-B
...
