---
Build:
  Building and testing of artefacts in virtual environments:
    risk: While building and testing artefacts, third party systems, application frameworks
      and 3rd party libaries are used. These might be malicious as a result of vulnerable
      libaries or because they are altered during the delivery phase.
    measure: Each step during within the build and testing phase is performed in a separate virtual
      environments, which is destroyed afterward.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: Docker
    dependsOn:
    - Defined build process
    risk: Performing builds without a defined process* is error prone.
      For example, as a result of incorect security related configuration.
    measure: A well defined build process lowers the possibility of errors during the build
      process.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 2
    usefulness: 4
    level: 1
    implementation: Jenkins, Docker
   Regular tests:
    risk: After pushing source code to the version control system, any elay in receiving feedback on defects makes them harder for the developer to remediate. 
    measure: On each push and/or at given intervals automatic security tests are performed.
    difficultyOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 2
    level: 2
    implementation: ""
    dependsOn:
    - Defined build process
  Signing of artefacts:
    risk: Unauthorized manipulation of artefacts might be difficult to spot. For example, this may result in
      images with malicious code in the Docker registry.
    measure: Digitally signing artefacts helps to ensure their integrity. 
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 4
    implementation: ""
    dependsOn:
    - Defined build process
    samm: OA3-B
Deployment:
  Backup before deployment:
    risk: If errors are experienced during the deployment process you want to deploy
      an old release. However, due to changes in the database this is often unfeasible.
    measure: Performing automated backups before deployment can help facilitate deployments whilst testing the backup restore processes.
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: A complete database dabackup might be performed*. For large and complex
      environments, a Point in Time Recovery for databases should be implemented.
    dependsOn:
    - Defined deployment process
    samm: OE2-A
  Blue/Green Deployment:
    risk: A new artefact version can have unknown defects.
    measure: By having multiple production environments, a deployment can be performent
      on the first environment to spot possible defects before it is deployment in the production environment(s)
    difficultyOfImplementation:
      knowledge: 1
      time: 2
      resources: 1
    usefulness: 2
    level: 4
    implementation: <a href='https://martinfowler.com/bliki/BlueGreenDeployment.html'>Blue/Green
      Deployments</a>
    dependsOn:
    - Smoke Test
  Defined deployment process:
    risk: Deployments without a defined process are error prone thus allowing old or untested artefact to be deployed.
    measure: A defined deployment process significantly lowers the likelihood of errors during the deployment phase.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 1
    implementation: Jenkins, Docker
  Environment depending configuration parameters:
    risk: Attackers who compromise source code can see confidential access information
      like database credentials.
    measure: Configuration parameters are set for each environment not in the source
      code.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    implementation: ""
    samm: SA2-A
  Handover of confidential parameters:
    risk: Attackers who compromise a system can see confidential access information
      like database credentials. Parameters are often used to set credentials, for
      example by starting containers or applications. These parameters can often be
      seen by any one listing running processes on the target system.
    measure: By using encryption, it is harder to read credentials , e.g.
      from the file system. Also, the usage of a credential management system can help
      protect credentials.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation: ""
    dependsOn:
    - Environment depending configuration parameters
      samm: SA2-A
  Rolling update on deployment:
    risk: While a deployment is performed, the application can not be reached.
    measure: A deployment without downtime is performed*.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 2
    level: 3
    implementation: Docker, Webserver, rolling update
    dependsOn:
    - Defined deployment process
  Same artefact for environments:
    risk: Building of an artefact for different environments means that an untested
      artefact might reach the production environment.
    measure: Building an artefact once and deploying it to different environments means
      that only tested artefacts are allowed to reach the production environment
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 3
    implementation: Docker
    dependsOn:
    - Defined build process
    samm:
    - OE2-A
  Usage of feature toggles:
    risk: By using environment dependent configuration, some parameters will not be
      tested correctly. i.e. <pre>if
      (host == 'production') {} else {}</pre>
    measure: Usage of environment independend configration parameter, called feature
      toggles, helps to enhance the test coverage.
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 2
    level: 3
    implementation: Docker
    dependsOn:
    - Same artefact for environments
    samm: EG1-B
...
