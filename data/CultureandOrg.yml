---
Culture and Org.:
  Aligning security in teams:
    risk: Everyone in a project team should feel responsible for security. The concept
      of Security Champions might suggest that only the security champion is repsonsible
      for security.
    measure: By aligning security professionals with project teams, a higher security
      standard can be reached.
    hardnessOfImplementation:
      knowledge: 4
      time: 5
      resources: 1
    implementation: In meetings for software design, sprint planning, etc. security
      professionals take part in order to give suggestions.
    usefulness: 5
    level: 4
    samm: EG2-B
  Conduction of advanced threat modelling:
    risk: Inadequately identification of business and technical risks.
    measure: Deep threat modelling, for example by using data flow diagramms, is performed.
    hardnessOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 3
    level: 4
    samm: TA2-B
  Conduction of collaborative security checks with develoeprs and system administrators:
    risk: Security checks by external companies do not increase the understand of
      an application/system for internal employees.
    measure: Periodically security reviews of the source code, in which the security
      experts and developers and system administrators are envolved, are increasing
      the security and the security knowledge in teams.
    hardnessOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    samm: IR1-B
  Conduction of collaborative team security checks:
    risk: Teams are not having enough inside in security.
    measure: Team testing the security of projects of other teams. This enhances the
      security awareness and knowledge.
    hardnessOfImplementation:
      resources: 2
      knowledge: 4
      time: 4
    usefulness: 2
    level: 4
    samm: EG2-A
  Conduction of simple threat modelling on business level:
    risk: Business related threats are discovered too late in the development and
      deployment process.
    measure: Threat modelling on business level is performed during the product backlog
      creation
    hardnessOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 3
    level: 3
    samm: TA1-A
  Conduction of simple threat modelling on technical level:
    risk: Technical related threats are discovered too late in the development and
      deployment process.
    measure: Threat modelling on technical level is performed during the product sprint
      planning
    hardnessOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 3
    level: 3
    samm: TA1-A
  Conduction of war games:
    risk: To understand incident response plans during an incident is hard.
    measure: War Games train incidents. A security professional creates attack scenarios
      in a testing environment. The teams are going thorough the training and learn
      how to react in case of an incident.
    hardnessOfImplementation:
      knowledge: 4
      time: 5
      resources: 5
    usefulness: 2
    level: 4
  Creation of advanced abuse stories:
    risk: Simple user stories are not going deep enough. Relevant security conciderations
      are performed. Security flaws are discovered too late in the development and
      deployment process
    measure: 'Advanced abuse stories are created with '
    hardnessOfImplementation:
      knowledge: 4
      time: 2
      resources: 1
    usefulness: 4
    level: 4
    dependsOn:
    - Creation of simple abuse stories
    samm: TA2-A
    implementation: <a href='https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories'>Don't
      Forget EVIL User Stories</a> and <a href='http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf'>Practical
      Security Stories and Security Tasks for Agile Development Environments</a>
  Creation of simple abuse stories:
    risk: User stories mostly don't consider security considerations. Security flaws
      are discovered too late in the development and deployment process.
    measure: During the creation of user stories abuse stories are created for a user
      story.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 4
    level: 2
    samm: TA2-A
    implementation: <a href='https://www.owasp.org/index.php/Agile_Software_Development:_Don%27t_Forget_EVIL_User_Stories'>Don't
      Forget EVIL User Stories</a> and <a href='http://safecode.org/publication/SAFECode_Agile_Dev_Security0712.pdf'>Practical
      Security Stories and Security Tasks for Agile Development Environments</a>
  Each team has a security champion:
    risk: No one feels responsible for security and the 'security guy' has not enough
      time for each team.
    measure: Each team defines an individual to be responsible for security. Often
      they are referred as 'security champions'
    hardnessOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 3
    level: 2
    samm: EG2-B
  Information security tragets are communicated:
    risk: Employees don't known the security targets of the organication. Therefore
      security is not as much considered during development and administration as
      it should be.
    measure: With transparent communication of the security targets through the top
      management security is enforced in teams.
    hardnessOfImplementation:
      knowledge: 1
      time: 1
      resources: 1
    usefulness: 4
    level: 1
    samm: SM1-B
  Reward of good communication:
    risk: Employees are not getting excited about security.
    measure: Rewarding good communication helps to encourage people in the area of
      security. Examples are T-Shirts, giftcards and 'High-Fives' on the floor.
    hardnessOfImplementation:
      knowledge: 3
      time: 2
      resources: 1
    usefulness: 3
    level: 2
    implementation: One example is the distributon of buttons as a reward, see <a
      href='https://www.owasp.org/index.php/OWASP_Security_Buttons_Project'>OWASP
      Security Buttons Project</a>
  Security-Lessoned-Learned:
    risk: After an incident, a simular incident might happen in the future.
    measure: A lessons learned after an incident helps in continuous improvement.
      Meetings with Security Champions are a good place for lessons learned.
    hardnessOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 3
    level: 3
    samm: IM-3, ST-3, SR2-B

Process:
#  Data classification:
  Definition of simple BCDR practices for citical components:
    risk: In case of an emergency, like a power outage, the actions to perform are not clear. This leads to a high time to repair.
    measure: By understanding and documenting a business continuity and disaster recovery (BCDR), the overall availabilitiy of systems and applications is increased. Success factors like responsibilties, Service Level Agreemenmts, Recovery Point Objectives, Recovery Time Objectives or Failover needs to be understood.
    hardnessOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 4
    level: 1

  Definition of a change mangement process:
    risk: The impact of a change is not controlled. Specially because they are not recorded.
    measure: Each change of a system is automatically recorded.
    hardnessOfImplementation:
      knowledge: 4
      time: 3
      resources: 1
    usefulness: 3
    level: 3

  Approval by reviewing any new version:
    risk: An individual might forget to add security measures to source code or infrastructure
      components.
    measure: On each new version (e.g. Pull Request) of source code or infrastructure
      components a review of the changes are performed by at least one additional
      person (two eyes principal). The focus of the review a security. After review,
      approval is given by the reviewer.
    hardnessOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    samm: IR1-B

#  Used licenses of components are known:

  Prevention of unauthorized installation:
    risk: Unaproved components are used.
    measure: "Components needs to be whitelisted. Regular scans on the docker infrastructure (e.g. cluster) need to be performed, to verify that only standardized base images are used."
    hardnessOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 3
    level: 3
    implementation: "Example: All docker images used by teams need to be based on standard images."
    comment: "By preventing teams from trying out new components, innovation might be slowed down."

...
