dimension:
  name: Test and Verification
  subdimension:
    level-1:
    - dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 1
        resources: 1
        time: 2
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/owasp-dependency-che
      iso27001-2017:
      - 12.6.1
      level: 1
      measure: Tests for known vulnerabilities in server side components (e.g. backend/middleware)
        are performed.
      name: Test of server side components with known vulnerabilities
      risk:
      - Server side components might have vulnerabilities.
      samm2: V-ST-2-A
      usefulness: 5
    level-2:
    - dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 2
        resources: 1
        time: 2
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/eslint
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/findsecuritybugs
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/jsprime
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/appscan-vscode-extension
      iso27001-2017:
      - 12.6.1
      level: 2
      measure: Usage of static analysis tools for important parts of the middleware
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      name: Static analysis for important server side components
      risk:
      - Important parts in the source code of the middleware have vulnerabilities.
      samm2: V-ST-2-A
      usefulness: 4
    - difficultyOfImplementation:
        knowledge: 2
        resources: 1
        time: 1
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/appscan-vscode-extension
      iso27001-2017:
      - hardening is not explicitly covered by ISO 27001 - too specific
      - 13.1.3
      level: 2
      measure: 'Integration of quality and linting plugins with interactive development
        environment (IDEs).

        '
      name: Local development security checks performed
      risk:
      - Creating and developing code contains code smells and quality issues.
      samm2: V-ST-A-1-1
      usefulness: 4
    level-3:
    - dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 2
        resources: 1
        time: 2
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/eslint
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/findsecuritybugs
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/jsprime
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/bdd-mobile-security
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/appscan-vscode-extension
      iso27001-2017:
      - 12.6.1
      level: 3
      measure: Usage of static analysis tools for important parts of the frontend
        are used. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      name: Static analysis for important client side components
      risk:
      - Important parts in the source code of the frontend have vulnerabilities.
      samm2: V-ST-2-A
      usefulness: 3
    - dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 1
        resources: 1
        time: 2
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/retire-js
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/npm-audit
      iso27001-2017:
      - 12.6.1
      level: 3
      measure: Tests for known vulnerabilities in components of the frontend are performed.
      name: Test of client side components with known vulnerabilities
      risk:
      - Client side components might have vulnerabilities.
      samm2: V-ST-2-A
      usefulness: 2
    level-4:
    - dependsOn:
      - Defined build process
      difficultyOfImplementation:
        knowledge: 1
        resources: 1
        time: 1
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/pmd
      iso27001-2017:
      - not explicitly covered by ISO 27001 - too specific
      - 14.2.1
      - 14.2.5
      level: 4
      measure: Automatic Detection and manual removal of duplicates in source code.
      name: Exclusion of source code duplicates
      risk:
      - Duplicates in source code might influence the stability of the application.
      samm2: V-ST-2-A
      usefulness: 1
    - dependsOn:
      - Static analysis for important client side components
      - Static analysis for important server side components
      difficultyOfImplementation:
        knowledge: 2
        resources: 2
        time: 4
      implementation: []
      iso27001-2017:
      - 12.6.1
      level: 4
      measure: Usage of a static analysis for all used components.
      name: Static analysis for all components/libraries
      risk:
      - Used components like libraries and legacy applications might have vulnerabilities
      samm2: V-ST-2-A
      usefulness: 3
    - dependsOn:
      - Static analysis for important client side components
      - Static analysis for important server side components
      difficultyOfImplementation:
        knowledge: 2
        resources: 1
        time: 2
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/eslint
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/findsecuritybugs
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/jsprime
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/fortify-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/checkmarx-vscode-extension
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/appscan-vscode-extension
      iso27001-2017:
      - 12.6.1
      level: 4
      measure: Usage of static analysis tools for all parts of the middleware and
        frontend. Static analysis uses for example string matching algorithms and/or
        dataflow analysis.
      name: Static analysis for all self written components
      risk:
      - Parts in the source code of the frontend or middleware have vulnerabilities.
      samm2: V-ST-2-A
      usefulness: 4
    - difficultyOfImplementation:
        knowledge: 1
        resources: 1
        time: 1
      implementation:
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/pmd
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/stylecop
      - $ref: data/dimensions-subdimensions-activities/implementations.yaml#/implementations/sonarqube
      iso27001-2017:
      - 12.6.1
      - 14.2.1
      - 14.2.5
      level: 4
      measure: Analysis of compliance to style guides of the source code ensures that
        source code indenting rules are met.
      name: Stylistic analysis
      risk:
      - False source code indenting might lead to vulnerabilities.
      samm2: V-ST-2-A
      usefulness: 1
    - dependsOn:
      - Test of server side components with known vulnerabilities
      - Test of client side components with known vulnerabilities
      - Static analysis for all self written components
      difficultyOfImplementation:
        knowledge: 3
        resources: 5
        time: 3
      implementation: []
      iso27001-2017:
      - 12.6.1
      - 14.2.1
      - 14.2.5
      level: 4
      measure: Usage of multiple static tools to find more vulnerabilities.
      name: Usage of multiple analyzers
      risk:
      - Each vulnerability analyzer has different opportunities. By using just one
        analyzer, some vulnerabilities might not be found.
      samm2: V-ST-3-A
      usefulness: 1
    name: Static depth for applications
